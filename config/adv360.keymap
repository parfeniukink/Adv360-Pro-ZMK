/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <32 31>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <56 55>;
        };
    };

    macros {
        remove_word_in_vim: remove_word_in_vim {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp W>;
            label = "REMOVE_WORD_IN_VIM";
        };

        tmux_pane_left: tmux_pane_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(A) &kp H>;
            label = "TMUX_PANE_LEFT";
        };

        tmux_pane_right: tmux_pane_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(A) &kp L>;
            label = "TMUX_PANE_RIGHT";
        };

        vim_pane_right: vim_pane_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp L>;
            label = "VIM_PANE_RIGHT";
        };

        vim_pane_left: vim_pane_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(W) &kp H>;
            label = "VIM_PANE_LEFT";
        };

        vim_pane_bottom: vim_pane_bottom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp J>;
            label = "VIM_PANE_BOTTOM";
        };

        vim_pane_top: vim_pane_top {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(W) &kp K>;
            label = "VIM_PANE_TOP";
        };

        vim_save: vim_save_no_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp ENTER>;
            label = "VIM_SAVE_NO_EXIT";
        };

        vim_exit: vim_exit_with_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp Q &kp ENTER>;
            label = "VIM_EXIT_WITH_SAVE";
        };

        python_breakpoint_message: python_breakpoint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp R &kp E &kp A &kp K &kp P &kp O &kp I &kp N &kp T &kp LPAR &kp RPAR &kp SPACE &kp SPACE &kp POUND &kp SPACE &kp LS(T) &kp LS(O) &kp LS(D) &kp LS(O) &kp COLON &kp SPACE &kp R &kp E &kp M &kp O &kp V &kp E>;
            label = "PYTHON_BREAKPOINT";
            wait-ms = <1>;
            tap-ms = <2>;
        };

        vim_fold: vim_fold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp C>;
            label = "VIM_FOLD";
        };

        vim_unfold: vim_unfold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp LS(A)>;
            label = "VIM_UNFOLD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &tog 0                                                                            &mo 2          &kp N6  &kp N7    &kp N8     &kp N9    &kp N0    &kp MINUS
&kp EQUAL   &kp Q      &kp W     &kp E     &kp R      &kp T   &kp PAGE_UP                                                                       &kp PAGE_DOWN  &kp Y   &kp U     &kp I      &kp O     &kp P     &kp BSLH
&kp TAB     &kp A      &kp S     &kp D     &kp F      &kp G   &kp HOME       &mo 3  &kp DELETE            &mo 3              &kp RIGHT_COMMAND  &kp END        &kp H   &kp J     &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT   &kp Z      &kp X     &kp C     &kp V      &kp B                         &kp LCTRL             &kp RALT                                             &kp N   &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&kp CAPS    &kp GRAVE  &kp LALT  &kp LEFT  &kp RIGHT          &kp BACKSPACE  &mo 1  &kp LEFT_COMMAND      &kp RIGHT_CONTROL  &kp ENTER          &kp SPACE              &kp DOWN  &kp UP     &kp LBKT  &kp RBKT  &mo 3
            >;
        };

        functional {
            bindings = <
&kp F1  &kp F2     &kp F3     &kp F4               &kp F5       &kp F6     &tog 0                                                    &none             &kp F7     &kp F8                &kp F9                 &kp F10  &kp F11    &kp F12
&trans  &trans     &kp LC(W)  &kp LC(P)            &trans       &trans     &none                                                     &none             &trans     &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans   &trans     &trans
&trans  &kp LC(A)  &kp GRAVE  &remove_word_in_vim  &kp LC(F)    &vim_save  &none   &trans  &trans      &trans         &trans         &none             &vim_exit  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp TAB  &kp COLON  &kp ESCAPE
&trans  &trans     &trans     &vim_fold            &vim_unfold  &trans                     &trans      &trans                                          &trans     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans   &trans     &trans
&trans  &trans     &trans     &trans               &trans                  &trans  &trans  &trans      &kp BACKSLASH  &kp LS(ENTER)  &kp LEFT_COMMAND             &trans                &trans                 &trans   &trans     &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        another_functional_layer {
            bindings = <
&trans  &trans  &trans        &trans        &trans        &trans        &trans                                         &trans         &trans         &trans                &trans                      &trans  &trans  &trans
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &trans                                         &trans         &trans         &kp LS(LG(NUMBER_4))  &trans                      &trans  &trans  &trans
&trans  &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans        &trans  &trans  &trans      &trans  &trans     &trans         &kp LG(LS(D))  &kp LS(LG(S))         &python_breakpoint_message  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0                  &trans      &trans                            &trans         &trans                &trans                      &trans  &trans  &trans
&trans  &trans  &trans        &trans        &trans                      &trans  &trans  &trans      &trans  &kp LA(S)  &kp LG(SPACE)                 &trans                &trans                      &trans  &trans  &trans
            >;
        };
    };
};
